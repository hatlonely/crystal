/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "uniqueid_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace uniqueid {

int _kResStatusValues[] = {
  ResStatus::kRSSuccess,
  ResStatus::kRSFail,
  ResStatus::kRSAgain
};
const char* _kResStatusNames[] = {
  "kRSSuccess",
  "kRSFail",
  "kRSAgain"
};
const std::map<int, const char*> _ResStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kResStatusValues, _kResStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


UniqueidRequest::~UniqueidRequest() throw() {
}


void UniqueidRequest::__set_logid(const int32_t val) {
  this->logid = val;
}

void UniqueidRequest::__set_serial(const int32_t val) {
  this->serial = val;
}

void UniqueidRequest::__set_length(const int64_t val) {
  this->length = val;
}

const char* UniqueidRequest::ascii_fingerprint = "F5482C93CA1806422ACA56B615045E1E";
const uint8_t UniqueidRequest::binary_fingerprint[16] = {0xF5,0x48,0x2C,0x93,0xCA,0x18,0x06,0x42,0x2A,0xCA,0x56,0xB6,0x15,0x04,0x5E,0x1E};

uint32_t UniqueidRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->logid);
          this->__isset.logid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->serial);
          this->__isset.serial = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UniqueidRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UniqueidRequest");

  xfer += oprot->writeFieldBegin("logid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->logid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serial", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->serial);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UniqueidRequest &a, UniqueidRequest &b) {
  using ::std::swap;
  swap(a.logid, b.logid);
  swap(a.serial, b.serial);
  swap(a.length, b.length);
  swap(a.__isset, b.__isset);
}

UniqueidRequest::UniqueidRequest(const UniqueidRequest& other0) {
  logid = other0.logid;
  serial = other0.serial;
  length = other0.length;
  __isset = other0.__isset;
}
UniqueidRequest& UniqueidRequest::operator=(const UniqueidRequest& other1) {
  logid = other1.logid;
  serial = other1.serial;
  length = other1.length;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UniqueidRequest& obj) {
  using apache::thrift::to_string;
  out << "UniqueidRequest(";
  out << "logid=" << to_string(obj.logid);
  out << ", " << "serial=" << to_string(obj.serial);
  out << ", " << "length=" << to_string(obj.length);
  out << ")";
  return out;
}


UniqueidResponse::~UniqueidResponse() throw() {
}


void UniqueidResponse::__set_logid(const int32_t val) {
  this->logid = val;
}

void UniqueidResponse::__set_serial(const int32_t val) {
  this->serial = val;
}

void UniqueidResponse::__set_length(const int64_t val) {
  this->length = val;
}

void UniqueidResponse::__set_offset(const int64_t val) {
  this->offset = val;
}

const char* UniqueidResponse::ascii_fingerprint = "79E7E056C23F48D5D9947CC94149E9C8";
const uint8_t UniqueidResponse::binary_fingerprint[16] = {0x79,0xE7,0xE0,0x56,0xC2,0x3F,0x48,0xD5,0xD9,0x94,0x7C,0xC9,0x41,0x49,0xE9,0xC8};

uint32_t UniqueidResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->logid);
          this->__isset.logid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->serial);
          this->__isset.serial = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UniqueidResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UniqueidResponse");

  xfer += oprot->writeFieldBegin("logid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->logid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serial", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->serial);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UniqueidResponse &a, UniqueidResponse &b) {
  using ::std::swap;
  swap(a.logid, b.logid);
  swap(a.serial, b.serial);
  swap(a.length, b.length);
  swap(a.offset, b.offset);
  swap(a.__isset, b.__isset);
}

UniqueidResponse::UniqueidResponse(const UniqueidResponse& other2) {
  logid = other2.logid;
  serial = other2.serial;
  length = other2.length;
  offset = other2.offset;
  __isset = other2.__isset;
}
UniqueidResponse& UniqueidResponse::operator=(const UniqueidResponse& other3) {
  logid = other3.logid;
  serial = other3.serial;
  length = other3.length;
  offset = other3.offset;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UniqueidResponse& obj) {
  using apache::thrift::to_string;
  out << "UniqueidResponse(";
  out << "logid=" << to_string(obj.logid);
  out << ", " << "serial=" << to_string(obj.serial);
  out << ", " << "length=" << to_string(obj.length);
  out << ", " << "offset=" << to_string(obj.offset);
  out << ")";
  return out;
}


UniqueidException::~UniqueidException() throw() {
}


void UniqueidException::__set_status(const ResStatus::type val) {
  this->status = val;
}

void UniqueidException::__set_what(const std::string& val) {
  this->what = val;
}

const char* UniqueidException::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t UniqueidException::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t UniqueidException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->status = (ResStatus::type)ecast4;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->what);
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UniqueidException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UniqueidException");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UniqueidException &a, UniqueidException &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.what, b.what);
  swap(a.__isset, b.__isset);
}

UniqueidException::UniqueidException(const UniqueidException& other5) : TException() {
  status = other5.status;
  what = other5.what;
  __isset = other5.__isset;
}
UniqueidException& UniqueidException::operator=(const UniqueidException& other6) {
  status = other6.status;
  what = other6.what;
  __isset = other6.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UniqueidException& obj) {
  using apache::thrift::to_string;
  out << "UniqueidException(";
  out << "status=" << to_string(obj.status);
  out << ", " << "what=" << to_string(obj.what);
  out << ")";
  return out;
}

} // namespace
