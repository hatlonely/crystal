/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef uniqueid_TYPES_H
#define uniqueid_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace uniqueid {

struct ResStatus {
  enum type {
    kRSSuccess = 0,
    kRSFail = 1,
    kRSAgain = 2
  };
};

extern const std::map<int, const char*> _ResStatus_VALUES_TO_NAMES;

class UniqueidRequest;

class UniqueidResponse;

class UniqueidException;

typedef struct _UniqueidRequest__isset {
  _UniqueidRequest__isset() : logid(false), serial(false), length(false) {}
  bool logid :1;
  bool serial :1;
  bool length :1;
} _UniqueidRequest__isset;

class UniqueidRequest {
 public:

  static const char* ascii_fingerprint; // = "F5482C93CA1806422ACA56B615045E1E";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x48,0x2C,0x93,0xCA,0x18,0x06,0x42,0x2A,0xCA,0x56,0xB6,0x15,0x04,0x5E,0x1E};

  UniqueidRequest(const UniqueidRequest&);
  UniqueidRequest& operator=(const UniqueidRequest&);
  UniqueidRequest() : logid(0), serial(0), length(0) {
  }

  virtual ~UniqueidRequest() throw();
  int32_t logid;
  int32_t serial;
  int64_t length;

  _UniqueidRequest__isset __isset;

  void __set_logid(const int32_t val);

  void __set_serial(const int32_t val);

  void __set_length(const int64_t val);

  bool operator == (const UniqueidRequest & rhs) const
  {
    if (!(logid == rhs.logid))
      return false;
    if (!(serial == rhs.serial))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const UniqueidRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UniqueidRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UniqueidRequest& obj);
};

void swap(UniqueidRequest &a, UniqueidRequest &b);

typedef struct _UniqueidResponse__isset {
  _UniqueidResponse__isset() : logid(false), serial(false), length(false), offset(false) {}
  bool logid :1;
  bool serial :1;
  bool length :1;
  bool offset :1;
} _UniqueidResponse__isset;

class UniqueidResponse {
 public:

  static const char* ascii_fingerprint; // = "79E7E056C23F48D5D9947CC94149E9C8";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0xE7,0xE0,0x56,0xC2,0x3F,0x48,0xD5,0xD9,0x94,0x7C,0xC9,0x41,0x49,0xE9,0xC8};

  UniqueidResponse(const UniqueidResponse&);
  UniqueidResponse& operator=(const UniqueidResponse&);
  UniqueidResponse() : logid(0), serial(0), length(0), offset(0) {
  }

  virtual ~UniqueidResponse() throw();
  int32_t logid;
  int32_t serial;
  int64_t length;
  int64_t offset;

  _UniqueidResponse__isset __isset;

  void __set_logid(const int32_t val);

  void __set_serial(const int32_t val);

  void __set_length(const int64_t val);

  void __set_offset(const int64_t val);

  bool operator == (const UniqueidResponse & rhs) const
  {
    if (!(logid == rhs.logid))
      return false;
    if (!(serial == rhs.serial))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const UniqueidResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UniqueidResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UniqueidResponse& obj);
};

void swap(UniqueidResponse &a, UniqueidResponse &b);

typedef struct _UniqueidException__isset {
  _UniqueidException__isset() : status(false), what(false) {}
  bool status :1;
  bool what :1;
} _UniqueidException__isset;

class UniqueidException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  UniqueidException(const UniqueidException&);
  UniqueidException& operator=(const UniqueidException&);
  UniqueidException() : status((ResStatus::type)0), what() {
  }

  virtual ~UniqueidException() throw();
  ResStatus::type status;
  std::string what;

  _UniqueidException__isset __isset;

  void __set_status(const ResStatus::type val);

  void __set_what(const std::string& val);

  bool operator == (const UniqueidException & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(what == rhs.what))
      return false;
    return true;
  }
  bool operator != (const UniqueidException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UniqueidException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UniqueidException& obj);
};

void swap(UniqueidException &a, UniqueidException &b);

} // namespace

#endif
